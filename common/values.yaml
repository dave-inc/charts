# Default values for common.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

# Used for NODE_ENV and DD_ENV
environment: staging
# Required: GCP Project where this Release will be deployed
project: ""

# Init container must have a name, image and command to run before
# deployContainer initializes.  Both containers share a /tmp volume mount.
initContainer:
  enabled: false
  name: "setup"
  image: "alpine:latest"
  command: ["sh", "-c", "touch /tmp/this"]
  volumeMounts:
    - name: tmp
      mountPath: /tmp

deploymentContainer:
  command: []
  args: []
  port: 8080
  livenessProbe:
    path: /
    port: ""
    failureThreshold: 3
    initialDelaySeconds: 0
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    path: /
    port: ""
    failureThreshold: 3
    initialDelaySeconds: 0
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  terminationGracePeriodSeconds: 30

image:
  repository: nginx
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: latest

imagePullSecrets: []

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using Release.Name
  name: ""
  # IAM workload idenitity binding name
  # If not set and serviceAccount.create:true, a name is generated using Release.Name
  # If Release.Name is bigger than 30 characteres use this variable to overwrite it with something shorter to identify this workload
  workloadIdentitySA: ""
  # Specifies whether an existing service account will be used
  # Make sure you set serviceAccount.create:false when using this option
  # Dynamic environments will use of this one
  existingNameSA: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  enabled: true
  # Only for cloudArmor use type: NodePort
  type: ClusterIP
  port: 80
  # The name of the service is optional, If not set, a name is generated using Release.Name
  # name: ""

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - backend:
            service:
              name: chart-service
              port: 
                number: 80
          path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
  # tls section is not used with using cloudArmor: enabled

cloudArmor:
  enabled: false
  # The name of cloudArmor is optional, If not set, a name is generated using Release.Name
  # name: ""
  # host and secretName are required to generate a certificate
  host: chart-example.local
  secretName: chart-example-tls
  # securityPolicy is required in backendConfig
  backendConfig:
    securityPolicy:
      name: chart-securitypolicy
    healthCheck:
      requestPath: /
      type: HTTP
  # By default we always use redirectToHttps in frontendConfig if you want to define overwrite consider including it
  frontendConfig:
    redirectToHttps:
      enabled: true
      responseCodeName: PERMANENT_REDIRECT
  # The name of staticIpName is optional, If not set, a name is generated using Release.Name
  # staticIpName: ""

# Used with cloudArmor only
certificate:
  issuer: letsencrypt

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

strategy: 
  rollingUpdate:
    maxSurge: 25%
    maxUnavailable: 25%
  type: RollingUpdate

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Used for DD_TRACE_AGENT_HOSTNAME on DD APM/Node.js potentially can be used with logger vars too
apm:
  enabled: false
  # If datadogEnvironment is not defined we use variable environment as default
  datadogEnvironment: ""

# Default Logger and DD variables are defined here: https://github.com/dave-inc/charts/blob/master/common/templates/deployment.yaml
# Custom env variables are defined here and will be populated via Deployment's ConfigMap
env: {}

# ConfigMap
# The configMapName is optional, If not set, a name is generated using Release.Name
configMapName: ""
existingConfigMapName: ""

# Secret
createSecret: false
createSecretName: ""
# Mutually exclusive with the two above
existingSecretName: ""

# CloudSQL side container
cloudsqlProxy:
  enabled: false
  name: cloudsql-proxy
  image:
    repository: gcr.io/cloudsql-docker/gce-proxy:latest
  # Command should be defined with the command and custom values of your CloudSQL instance
  # command: ['/cloud_sql_proxy','--dir=/cloudsql','-instances=project_name:region:instance_name']
  resources:
    requests:
      cpu: '100m'
  lifecycle:
    preStop:
      exec:
        command: ['/bin/sh','-c','/bin/sleep 30']
  volume: cloudsql
  # This section creates a template in Argo Workflows that is used for sql migrations
  migrationTemplate:
    enabled: false
    # Knex migration command is used by default
    command: /opt/app/node_modules/.bin/knex --knexfile knexfile.js migrate:latest
    # Image tag used for migration template along with image.repository. This can always be replaced at runtime in Argo Workflows
    tag: latest
    # Instance connection name should be defined with custom values of your CloudSQL instance
    #instanceConnectionName: project_name:region:instance_name
    port: 3306
    secretName: migration
