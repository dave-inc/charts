{{- if .Values.policySets.common.enabled }}
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: probes
  namespace: {{ .Values.policySets.common.namespace }}
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,StatefulSet
    policies.kyverno.io/title: Require Pod Probes
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      Liveness and readiness probes need to be configured to correctly manage a Pod's
      lifecycle during deployments, restarts, and upgrades. For each Pod, a periodic
      `livenessProbe` is performed by the kubelet to determine if the Pod's containers
      are running or need to be restarted. A `readinessProbe` is used by Services
      and Deployments to determine if the Pod is ready to receive network traffic.
      This policy validates that all containers have one of livenessProbe, readinessProbe,
      or startupProbe defined.      
spec:
  validationFailureAction: {{ .Values.policySets.common.validationFailureAction }}
  background: true
  rules:
  - name: liveness
    match:
      any:
      - resources:
          kinds:
          - Pod
    preconditions:
      all:
      - key: "{{`{{request.operation || 'BACKGROUND'}}`}}"
        operator: AnyIn
        value:
        - CREATE
        - UPDATE
    validate:
      message: "Liveness probes are required for all containers."
      foreach:
      - list: request.object.spec.containers[]
        deny:
          conditions:
            all:
            - key: livenessProbe
              operator: AllNotIn
              value: "{{`{{ element.keys(@)[] }}`}}"
  - name: readiness
    match:
      any:
      - resources:
          kinds:
          - Pod
    preconditions:
      all:
      - key: "{{`{{request.operation || 'BACKGROUND'}}`}}"
        operator: AnyIn
        value:
        - CREATE
        - UPDATE
    validate:
      message: "Readiness probes are required for all containers."
      foreach:
      - list: request.object.spec.containers[]
        deny:
          conditions:
            all:
            - key: readinessProbe
              operator: AllNotIn
              value: "{{`{{ element.keys(@)[] }}`}}"
{{- end }}
