apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: {{ include "common.name" . }}
  generateName: {{ include "common.name" . }}-
spec:
  arguments:
    parameters:
    - name: image
      value: "{{ .Values.image.repository }}"
    - name: tag
      value: "{{ .Values.image.tag }}"
    - name: args
      value: "{{ .Values.args }}"
  ttlStrategy:
    secondsAfterCompletion: {{ int .Values.ttlStrategy.secondsAfterCompletion }}
    secondsAfterSuccess: {{ int .Values.ttlStrategy.secondsAfterSuccess }}
    secondsAfterFailure: {{ int .Values.ttlStrategy.secondsAfterFailure }}
  entrypoint: main-runner
  {{- if .Values.podDisruptionBudget.minAvailable }}
  podDisruptionBudget:
    minAvailable: "{{ .Values.podDisruptionBudget.minAvailable }}"
  {{- end }}
  serviceAccountName: {{ include "common.serviceAccountName" . }}
  {{- with .Values.nodeSelector }}
  nodeSelector:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.tolerations }}
  tolerations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  templates:
  
  - name: main-runner
    steps:
    - - name: log-parameters
        template: log-parameters
{{- if .Values.cloudsqlProxy.enabled }}
    - - name: cloudsql-proxy
        template: database
{{- end }}
    - - name: script-runner
        template: runner
        arguments:
          parameters:
          - name: args
            value: "{{`{{workflow.parameters.args}}`}}"
          {{- if .Values.cloudsqlProxy.enabled }}
          - name: cloudsql-proxy-ip
            value: "{{`{{steps.cloudsql-proxy.ip}}`}}"
          {{- end }}

  - name: log-parameters
    container:
      image: alpine:latest
      command: [sh, -c]
      args: ["echo 'Image:{{`{{workflow.parameters.image}}`}} Tag:{{`{{workflow.parameters.tag}}`}} Args:{{`{{workflow.parameters.args}}`}}'"]

{{- if .Values.cloudsqlProxy.enabled }}

  - name: database
    daemon: true
    retryStrategy:
      limit: 3
    container:
      image: gcr.io/cloudsql-docker/gce-proxy:latest
      command: ["/cloud_sql_proxy","-instances={{ required `"A valid instanceUrl is required!"` .Values.cloudsqlProxy.instanceConnectionName }}=tcp:0.0.0.0:{{ .Values.cloudsqlProxy.port }}"]
      readinessProbe:
        tcpSocket:
          port: {{ .Values.cloudsqlProxy.port }}
{{- end }}

  - name: runner
    inputs:
      parameters:
      - name: args
      {{- if .Values.cloudsqlProxy.enabled }}
      - name: cloudsql-proxy-ip
      {{- end }}
    container:
      image: "{{`{{workflow.parameters.image}}`}}:{{`{{workflow.parameters.tag}}`}}"
      command: [sh, -c]
      args: ["{{`{{ inputs.parameters.args }}`}}"]
      envFrom:
      {{- if .Values.existingConfigMapName }}
      - configMapRef:
          name: {{ .Values.existingConfigMapName }}
      {{- end }}
      {{- if .Values.env }}
      - configMapRef:
          name: {{ .Values.configMapName | default (include "common.name" .) }}
      {{- end}}
      {{- if and (.Values.createSecret) (not .Values.createSecretName) }}
      - secretRef:
          name: {{ include "common.name" . }}
      {{- else if and (.Values.createSecret) (.Values.createSecretName) }}
      - secretRef:
          name: {{ .Values.createSecretName }}
      {{- else if and (.Values.existingSecretName) (not .Values.createSecret) }}
      - secretRef:
          name: {{ .Values.existingSecretName }}
      {{- else }}
      {{- end }}
      env:
      - name: NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            fieldPath: spec.nodeName
      - name: NODE_ENV
        value: {{ .Values.environment }}
      {{- if .Values.cloudsqlProxy.enabled }}
      - name: DB_HOST
        value: "{{`{{ inputs.parameters.cloudsql-proxy-ip }}`}}"
      - name: DB_PORT
        value: "{{ .Values.cloudsqlProxy.port }}"
      {{- end }}
      {{- if .Values.apm.enabled }}
      - name: DD_ENV
        value: {{ .Values.apm.datadogEnvironment | default .Values.environment }}
      - name: DD_TRACE_AGENT_HOSTNAME
        valueFrom:
          fieldRef:
            fieldPath: status.hostIP
      {{/*
      Used by hot-shots package as default StatsD host
      */}}
      - name: DD_AGENT_HOST
        valueFrom:
          fieldRef:
            fieldPath: status.hostIP
      - name: DD_SERVICE_NAME
        value: {{ include "common.name" . }}
      {{- end }}
      resources:
        {{- toYaml .Values.resources | nindent 12 }}
    {{- with .Values.sidecars }}
    sidecars:
      {{- toYaml . | nindent 4 }}
    {{- end }}
