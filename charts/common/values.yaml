# Default values for common.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

# Used for NODE_ENV and DD_ENV
environment: staging
# Required: GCP Project where this Release will be deployed
project: ""

# Init container must have a name, image and command to run before
# deployContainer initializes.  Both containers share a /tmp volume mount.
initContainer:
  enabled: false
  name: "setup"
  image: "alpine:latest"
  command: ["sh", "-c", "touch /tmp/this"]
  volumeMounts:
    - name: tmp
      mountPath: /tmp

deploymentContainer:
  command: []
  args: []
  port: 8080

  # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  # Default probe mechanism httpGet, if a different mechanism is needed use customLivenessProbe and customReadinessProbe
  livenessProbe: {}
    # path: /
    # port: ""
    # failureThreshold: 3
    # initialDelaySeconds: 0
    # periodSeconds: 10
    # successThreshold: 1
    # timeoutSeconds: 1
  readinessProbe: {}
    # path: /
    # port: ""
    # failureThreshold: 3
    # initialDelaySeconds: 0
    # periodSeconds: 10
    # successThreshold: 1
    # timeoutSeconds: 1
  startupProbe: {}
    # path: /
    # port: ""
    # failureThreshold: 3
    # initialDelaySeconds: 0
    # periodSeconds: 10
    # successThreshold: 1
    # timeoutSeconds: 1

  # customlivenessProbe that overrides the default one
  # example:
  # customLivenessProbe:
  #   exec:
  #     command:
  #     - cat
  #     - /tmp/healthy
  #   initialDelaySeconds: 5
  #   periodSeconds: 5
  customLivenessProbe: {}

  # customReadinessProbe that overrides the default one
  #example:
  # customReadinessProbe:
  #   tcpSocket:
  #     port: 8080
  #   initialDelaySeconds: 15
  #   periodSeconds: 20
  customReadinessProbe: {}

  # customStartupProbe that overrides the default one
  customStartupProbe: {}

  terminationGracePeriodSeconds: 30

image:
  repository: nginx
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: latest

imagePullSecrets: []

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using Release.Name
  name: ""
  # IAM workload idenitity binding name
  # If not set and serviceAccount.create:true, a name is generated using Release.Name
  # If Release.Name is bigger than 30 characteres use this variable to overwrite it with something shorter to identify this workload
  workloadIdentitySA: ""
  # Specifies whether an existing service account will be used
  # Make sure you set serviceAccount.create:false when using this option
  # Dynamic environments will use of this one
  existingNameSA: ""

podAnnotations: {}

podSecurityContext:
  runAsUser: 1000
  runAsGroup: 1000
  
securityContext:
  allowPrivilegeEscalation: false
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  enabled: true
  type: ClusterIP
  port: 80
  # The name of the service is optional, If not set, a name is generated using Release.Name
  # name: ""

ingress:
  enabled: false
  hosts:
    - host: chart-example.local
      # The name is optional, If not set, a name is generated using host
      # name: ""
      annotations: {}
        # kubernetes.io/ingress.class: (nginx-internal or nginx-public)
        # kubernetes.io/tls-acme: "true"
      paths:
        - backend:
            service:
              name: chart-service
              port:
                number: 80
          path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

cloudArmor:
  enabled: false
  # The name of cloudArmor is optional, if not set, a name is generated using <Release.Name>-ca
  # If you overwrite <name> it should match <serviceName> under the paths section
  # name: ""
  annotations: {}
  paths:
    - backend:
        service:
          name: chart-service-ca
          port:
            number: 80
      path: /*
      pathType: ImplementationSpecific
  certificate:
    host: chart-example.local
    # secretName is optional, if not set, a name is generated using <host> will be converted to chart-example-local-ca-tls
    # secretName: chart-example-local-ca-tls
    issuer: letsencrypt
    # alternativeDnsNames:
    #  - www.chart-example.local
    #  - blog.chart-example.local
  # securityPolicy is required in backendConfig. This is a resource in GCP.
  backendConfig:
    healthCheck:
      requestPath: /
      type: HTTP
    # securityPolicy should be set for CloudArmor and it's optional for Cloud IAP
    # securityPolicy:
    #   name: chart-securitypolicy
    # Cloud IAP requires an existing Oauth client secret
    # iap:
    #   enabled: true
    #   oauthclientCredentials:
    #     secretName: chart-iapsecret
  # By default we always use redirectToHttps in frontendConfig if you want to define overwrite consider including it
  frontendConfig:
    redirectToHttps:
      enabled: true
      responseCodeName: PERMANENT_REDIRECT
  # staticIpName is optional, If not set, a name is generated using Release.Name. This is a resource in GCP.
  # staticIpName: ""
  # cloudArmor needs a service type NodePort
  service:
    type: NodePort

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 200m
  #   memory: 256Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

strategy: 
  rollingUpdate:
    maxSurge: 25%
    maxUnavailable: 25%
  type: RollingUpdate

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  metrics: []
# Type Resource
#
#  metrics:
#  - type: Resource
#    resource:
#      name: cpu
#      target:
#        type: Utilization
#        averageUtilization: 50
#  - type: Resource
#    resource:
#      name: memory
#      target:
#        type: AverageValue
#        averageValue: 100Mi
#
# Type External
#
#  metrics:
#  - type: External
#    external:
#      metric:
#        name: pubsub.googleapis.com|subscription|num_undelivered_messages
#        selector:
#          matchLabels:
#            resource.labels.subscription_id: payment-method-update
#      target:
#        type: AverageValue
#        averageValue: 100

nodeSelector: {}

tolerations: []

affinity: {}

# Used for DD_TRACE_AGENT_HOSTNAME on DD APM/Node.js potentially can be used with logger vars too
apm:
  enabled: false
  # If datadogEnvironment is not defined we use variable environment as default
  datadogEnvironment: ""
  # Optional override DD_SERVICE_NAME to a custon name instead of common.name
  datadogServiceName: ""
  # Optional bool used to avoid definition of env DD_SERVICE_NAME
  # Used to support imported workloads from legacy projects
  # DD_SERVICE_NAME will take the value from the app name in package.json.
  # datadogSkipServiceName: false

# Default Logger and DD variables are defined here: https://github.com/dave-inc/charts/blob/master/common/templates/deployment.yaml
# Custom env variables are defined here and will be populated via Deployment's ConfigMap
env: {}

# ConfigMap
# The configMapName is optional, If not set, a name is generated using Release.Name
configMapName: ""
existingConfigMapName: ""

# existingConfigMapMount used for configs that need
# to be used as files and mounted as volume
existingConfigMapMount:
  enabled: false
  # Specify configMap(s), mountPath and defaultMode
  # configMaps:
  #   - name: configMap-name-1
  #     mountPath: /home/someuser/
  #     subPath: ""
  #     defaultMode: 420
  #   - name: configMap-name-2
  #     mountPath: /www/somepath/
  #     subPath: ""
  #     defaultMode: 420

# Secret
createSecret: false
createSecretName: ""
# Mutually exclusive with the two above
# existingSecretName will used as secretRef
existingSecretName: ""
# existingSecretMount used for SSH keys or Tls certs and mounted as volume
existingSecretMount:
  enabled: false
  # Specify secret(s), mountPath and defaultMode
  # secrets:
  #   - name: secret-ssh-keys
  #     mountPath: /home/someuser/
  #     defaultMode: 420
  #   - name: secret-ssh-tls
  #     mountPath: /www/somepath/
  #     defaultMode: 420

# CloudSQL side container
cloudsqlProxy:
  enabled: false
  name: cloudsql-proxy
  image:
    repository: gcr.io/cloudsql-docker/gce-proxy:1.31.1-alpine
  # Command should be defined with the command and custom values of your CloudSQL instance
  # command: ['/cloud_sql_proxy','--dir=/cloudsql','-instances=project_name:region:instance_name']
  resources:
    requests:
      cpu: '100m'
  lifecycle:
    preStop:
      exec:
        command: ['/bin/sh','-c','/bin/sleep 30']
  volume: cloudsql
  # This section creates a template in Argo Workflows that is used for sql migrations
  migrationTemplate:
    enabled: false
    # Knex migration command is used by default
    command: /opt/app/node_modules/.bin/knex --knexfile knexfile.js migrate:latest
    # Image tag used for migration template along with image.repository. This can always be replaced at runtime in Argo Workflows
    tag: latest
    # Instance connection name should be defined with custom values of your CloudSQL instance
    #instanceConnectionName: project_name:region:instance_name
    port: 3306
    secretName: migration

# Generic mechanism to introduce arbitrary config files backed by a k8s ConfigMap.
# If the file already exists on the given `path`, this will overwrite it.
customConfig:
  enabled: false
  # If `name` is not defined, it will be Release.Name + '-customconfig'.
  name: ""
  path: /opt/app/config
  data: {}
#   default.json: |
#      {
#        "whatever": "your",
#        "project": "secret:needs"
#      }

# PodDisruptionBudget
#
# minAvailable and maxUnavailable are mutually exclusive, only one should be set.
#
# If podDisruptionBudget is enabled but no minAvailable or maxUnavailable fields
# are set, the PodDisruptionTemplate template will default to `minAvailable: 15%`.
#
# The value for minAvailable and maxUnavailable should either be set to an integer
# or a percentage.  For more information see the official documentation:
#
# https://kubernetes.io/docs/tasks/run-application/configure-pdb/
podDisruptionBudget:
  enabled: false
  # minAvailable: "15%"
  # maxUnavailable: 5

# VerticalPodAutoscaler
#
# TODO: (maybe) Support for "Initial", "Auto" and "Recreate" updateModes.
#
# Requires Vertical Pod Autoscaling feature to be enabled on the target GKE cluster
#
# VirtualPodAutoscaler's updateMode is hardcoded to "Off".  Purposely not allowing
# "Initial", "Auto" and "Recreate" updateModes to be used as further understanding
# of how the VPA work is required, specially if used in conjuction with HPAs.  When
# updateMode is set to "Off", no vertical autoscaling actions are taken.  The purpose
# of enabling the VPA with updateMode set to "Off" is to get recommendations on what
# initial settings should be for resource requests and limits based on current
# workloads.
#
# For more information refer to the GKE documentation on VPAs:
#
# https://cloud.google.com/kubernetes-engine/docs/concepts/verticalpodautoscaler
verticalPodAutoscaler:
  enabled: false

#  This is used to override "common.selectorLabels" on deployment, pods and services
#  used mostly only when importing legacy deployments.

podSelectorLabelsOverride: {}
