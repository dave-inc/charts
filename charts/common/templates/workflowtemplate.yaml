{{- if .Values.cloudsqlProxy.migrationTemplate.enabled -}}
{{- $sqlinstanceConnectionName := include "common.instanceConnectionName" . -}}
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: {{ include "common.name" . }}-migrate
  generateName: {{ include "common.name" . }}-migrate-
spec:
  arguments:
    parameters:
    - name: image
      value: "{{ .Values.image.repository }}"
    - name: tag
      value: "{{ .Values.cloudsqlProxy.migrationTemplate.tag }}"
    - name: command
      value: "{{ .Values.cloudsqlProxy.migrationTemplate.command }}"
  ttlStrategy:
    secondsAfterCompletion: {{ int .Values.cloudsqlProxy.migrationTemplate.ttlStrategy.secondsAfterCompletion }}
    secondsAfterSuccess: {{ int .Values.cloudsqlProxy.migrationTemplate.ttlStrategy.secondsAfterSuccess }}
    secondsAfterFailure: {{ int .Values.cloudsqlProxy.migrationTemplate.ttlStrategy.secondsAfterFailure }}
  entrypoint: migrate
  serviceAccountName: workflows
  templates:
  - name: migrate
    steps:
    - - name: log-parameters
        template: log-parameters
    - - name: cloudsql-proxy
        template: database
    - - name: app-migration
        template: app
        arguments:
          parameters:
          - name: cmd
            value: export DB_HOST={{`{{ steps.cloudsql-proxy.ip }}`}} && {{`{{workflow.parameters.command}}`}}

  - name: log-parameters
    container:
      image: alpine:latest
      command: [sh, -c]
      args: ["echo 'Image:{{`{{workflow.parameters.image}}`}} Tag:{{`{{workflow.parameters.tag}}`}} Command:{{`{{workflow.parameters.command}}`}}'"]

  - name: database
    daemon: true
    retryStrategy:
      limit: 3
    container:
      image: gcr.io/cloudsql-docker/gce-proxy:latest
      command: ["/cloud_sql_proxy","-instances={{ $sqlinstanceConnectionName }}=tcp:0.0.0.0:{{ .Values.cloudsqlProxy.migrationTemplate.port }}"]
      readinessProbe:
        tcpSocket:
          port: {{ .Values.cloudsqlProxy.migrationTemplate.port }}
  - name: app
    inputs:
      parameters:
      - name: cmd
    container:
      image: "{{`{{workflow.parameters.image}}`}}:{{`{{workflow.parameters.tag}}`}}"
      command: [sh, -c]
      args: ["{{`{{ inputs.parameters.cmd }}`}}"]
      envFrom:
      - secretRef:
          name: {{ .Values.cloudsqlProxy.migrationTemplate.secretName }}
      env:
      - name: NODE_ENV
        value: {{ .Values.environment }}
      - name: DB_NAME
        value: {{ required "A valid env.DB_NAME is required!" .Values.env.DB_NAME }}
      - name: DB_PORT
        value: "{{ .Values.cloudsqlProxy.migrationTemplate.port }}"
{{- end }}
