{{/* Any resource that defines a volume should be included in the list below */}}
{{- $hasVolumes := (or
.Values.initContainer.enabled
.Values.cloudsqlProxy.enabled
.Values.existingSecretMount.enabled
.Values.existingConfigMapMount.enabled
.Values.customConfig.enabled
.Values.customVolumes.enabled
) -}}
{{- $sqlProxyVersion := include "common.cloudsqlProxyVersion" . -}}
{{- $sqlinstanceConnectionName := include "common.instanceConnectionName" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.name" . }}
  labels:
    tags.datadoghq.com/version: "{{ .Values.image.tag }}"
    run: {{ include "common.name" . }}
    {{- include "common.labels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
    {{- if not .Values.podSelectorLabelsOverride }}
      {{- include "common.selectorLabels" . | nindent 6 }}
    {{- end }}
    {{- if .Values.podSelectorLabelsOverride }}
      {{- .Values.podSelectorLabelsOverride | toYaml | nindent 6 }}
    {{- end }}
  strategy:
    {{- toYaml .Values.strategy | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- /*
        https://helm.sh/docs/howto/charts_tips_and_tricks/#automatically-roll-deployments
        */}}
        checksum/config: {{ .Values.env | toString | sha256sum }}
        {{- if .Values.podAnnotations }}
        {{- toYaml .Values.podAnnotations | nindent 8 }}
        {{- end }}
      labels:
        tags.datadoghq.com/version: "{{ .Values.image.tag }}"
      {{- if not .Values.podSelectorLabelsOverride }}
        run: {{ include "common.name" . }}
        {{- include "common.selectorLabels" . | nindent 8 }}
      {{- end }}
      {{- if .Values.podSelectorLabelsOverride }}
        {{- .Values.podSelectorLabelsOverride | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.additionalLabels }}
        {{- .Values.additionalLabels | toYaml | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "common.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- if or (.Values.topologySpreadConstraints.zone.enabled) (.Values.topologySpreadConstraints.node.enabled) }}
      topologySpreadConstraints:
        {{- if .Values.topologySpreadConstraints.zone.enabled }}
        - topologyKey: {{ .Values.topologySpreadConstraints.zone.topologyKey }}
          maxSkew: {{ .Values.topologySpreadConstraints.zone.maxSkew }}
          whenUnsatisfiable: {{ .Values.topologySpreadConstraints.zone.whenUnsatisfiable }}
          labelSelector:
            matchLabels:
              {{- include "common.selectorLabels" . | nindent 14 }}
        {{- end }}
        {{- if .Values.topologySpreadConstraints.node.enabled }}
        - topologyKey: {{ .Values.topologySpreadConstraints.node.topologyKey }}
          maxSkew: {{ .Values.topologySpreadConstraints.node.maxSkew }}
          whenUnsatisfiable: {{ .Values.topologySpreadConstraints.node.whenUnsatisfiable }}
          labelSelector:
            matchLabels:
              {{- include "common.selectorLabels" . | nindent 14 }}
        {{- end }}
      {{- end }}
      {{- if (or .Values.initContainer.enabled .Values.failOnMissingLocalSecrets.enabled) }}
      initContainers:
        {{- if .Values.initContainer.enabled }}
        - name: {{ .Values.initContainer.name }}
          image: {{ .Values.initContainer.image }}
          command: {{ toYaml .Values.initContainer.command | nindent 12 }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
        {{- end }}
        {{- if .Values.failOnMissingLocalSecrets.enabled }}
        - name: check-local-secrets
          {{/* Reusing the main container's image is done on purpose */}}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          command: {{ toYaml .Values.failOnMissingLocalSecrets.secretsFetch.command | nindent 12}}
          args: {{ toYaml .Values.failOnMissingLocalSecrets.secretsFetch.args | nindent 12}}
          env:
            - name: NODE_ENV
              value: {{ .Values.environment }}
        {{- end }}
      {{- end }}
      containers:
        - name: {{ include "common.name" . }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.deploymentContainer.port }}
              protocol: TCP
          {{- if .Values.deploymentContainer.livenessProbe }}
          livenessProbe:
            httpGet:
              path: {{ .Values.deploymentContainer.livenessProbe.path }}
              port: {{ .Values.deploymentContainer.livenessProbe.port | default .Values.deploymentContainer.port }}
              {{- if .Values.deploymentContainer.livenessProbe.httpHeaders }}
              httpHeaders:
                {{- toYaml .Values.deploymentContainer.livenessProbe.httpHeaders | nindent 16 }}
              {{- end }}
            failureThreshold: {{ .Values.deploymentContainer.livenessProbe.failureThreshold }}
            initialDelaySeconds: {{ .Values.deploymentContainer.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.deploymentContainer.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.deploymentContainer.livenessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.deploymentContainer.livenessProbe.timeoutSeconds }}
          {{- else if .Values.deploymentContainer.customLivenessProbe }}
          livenessProbe:
            {{- toYaml .Values.deploymentContainer.customLivenessProbe | nindent 12 }}
          {{- end }}
          {{- if .Values.deploymentContainer.readinessProbe }}
          readinessProbe:
            httpGet:
              path: {{ .Values.deploymentContainer.readinessProbe.path }}
              port: {{ .Values.deploymentContainer.readinessProbe.port | default .Values.deploymentContainer.port }}
              {{- if .Values.deploymentContainer.readinessProbe.httpHeaders }}
              httpHeaders:
                {{- toYaml .Values.deploymentContainer.readinessProbe.httpHeaders | nindent 16 }}
              {{- end }}
            failureThreshold: {{ .Values.deploymentContainer.readinessProbe.failureThreshold }}
            initialDelaySeconds: {{ .Values.deploymentContainer.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.deploymentContainer.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.deploymentContainer.readinessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.deploymentContainer.readinessProbe.timeoutSeconds }}
          {{- else if .Values.deploymentContainer.customReadinessProbe }}
          readinessProbe:
            {{- toYaml .Values.deploymentContainer.customReadinessProbe | nindent 12 }}
          {{- end }}
          {{- if .Values.deploymentContainer.startupProbe }}
          startupProbe:
            httpGet:
              path: {{ .Values.deploymentContainer.startupProbe.path }}
              port: {{ .Values.deploymentContainer.startupProbe.port | default .Values.deploymentContainer.port }}
              {{- if .Values.deploymentContainer.startupProbe.httpHeaders }}
              httpHeaders:
                {{- toYaml .Values.deploymentContainer.startupProbe.httpHeaders | nindent 16 }}
              {{- end }}
            failureThreshold: {{ .Values.deploymentContainer.startupProbe.failureThreshold }}
            initialDelaySeconds: {{ .Values.deploymentContainer.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.deploymentContainer.startupProbe.periodSeconds }}
            successThreshold: {{ .Values.deploymentContainer.startupProbe.successThreshold }}
            timeoutSeconds: {{ .Values.deploymentContainer.startupProbe.timeoutSeconds }}
          {{- else if .Values.deploymentContainer.customStartupProbe }}
          startupProbe:
            {{- toYaml .Values.deploymentContainer.customStartupProbe | nindent 12 }}
          {{- end }}
          {{- if .Values.resources }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          {{- if .Values.deploymentContainer.command }}
          command:
            {{- toYaml .Values.deploymentContainer.command | nindent 12 }}
          {{- end }}
          {{- if .Values.deploymentContainer.args }}
          args:
            {{- toYaml .Values.deploymentContainer.args | nindent 12 }}
          {{- end }}
          env:
            {{/*
            Environment variables used by the common logger
            https://github.com/dave-inc/logger/blob/6c69fe2cba9bb954494fe9c6b5297633c1a19aeb/README.md#L69
            */}}
            - name: DEPLOYMENT_NAME
              value: {{ include "common.name" . }}
            - name: DD_VERSION
              value: "{{ .Values.image.tag }}"
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_ENV
              value: {{ .Values.environment }}
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          {{- if .Values.apm.enabled }}
            - name: DD_ENV
              value: {{ .Values.apm.datadogEnvironment | default .Values.environment }}
            - name: DD_TRACE_AGENT_HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            {{- if .Values.apm.otlp }}
            - name: OTEL_TRACES_EXPORTER
              value: "otlp"
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "http://$(DD_TRACE_AGENT_HOSTNAME):4318"
            {{- end }}
            {{/*
            Used by hot-shots package as default StatsD host
            */}}
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            {{- if not .Values.apm.datadogSkipServiceName }}
            - name: DD_SERVICE_NAME
              value: {{ .Values.apm.datadogServiceName | default (include "common.name" .) }}
            {{- end }}
            - name: DD_GIT_COMMIT_SHA
              value: {{ .Values.apm.commitSha }}
            - name: DD_GIT_REPOSITORY_URL
              value: {{ .Values.apm.repositoryUrl }}
          {{- end }}
          envFrom:
            {{- if .Values.existingConfigMapName }}
            - configMapRef:
                name: {{ .Values.existingConfigMapName }}
            {{- end }}
            {{- if .Values.env }}
            - configMapRef:
                name: {{ .Values.configMapName | default (include "common.name" .) }}
            {{- end}}
            {{- if and (.Values.createSecret) (not .Values.createSecretName) }}
            - secretRef:
                name: {{ include "common.name" . }}
            {{- else if and (.Values.createSecret) (.Values.createSecretName) }}
            - secretRef:
                name: {{ .Values.createSecretName }}
            {{- else if and (.Values.existingSecretName) (not .Values.createSecret) }}
            - secretRef:
                name: {{ .Values.existingSecretName }}
            {{- else }}
            {{- end }}
          {{- if $hasVolumes }}{{/* begin volumeMounts */}}
          volumeMounts:
          {{- if .Values.initContainer.enabled }}
            - name: tmp
              mountPath: /tmp
          {{- end }}
          {{- if .Values.cloudsqlProxy.enabled }}
            - name: {{ .Values.cloudsqlProxy.volume }}
              mountPath: /{{ .Values.cloudsqlProxy.volume }}
          {{- end }}
          {{- if .Values.existingSecretMount.enabled }}
            {{- range .Values.existingSecretMount.secrets }}
            - name: {{ .name }}-vol
              mountPath: {{ .mountPath }}
              {{- if .subPath }}
              subPath: {{ .subPath }}
              {{- end }}
              readOnly: true
            {{- end }}
          {{- end }}
          {{- if .Values.existingConfigMapMount.enabled }}
            {{- range .Values.existingConfigMapMount.configMaps }}
            - name: {{ .name }}-vol
              mountPath: {{ .mountPath }}
              {{- if .subPath }}
              subPath: {{ .subPath }}
              {{- end }}
              readOnly: true
            {{- end }}
          {{- end }}
          {{- if .Values.customConfig.enabled }}
            {{ $path := .Values.customConfig.path }}
            {{- range $fileName, $_ := .Values.customConfig.data }}
            - name: customconfig-vol
              mountPath: {{ $path }}/{{ $fileName }}
              subPath: {{ $fileName }}
              readOnly: true
            {{- end }}
          {{- end }}
          {{- if .Values.customVolumes.enabled }}
            {{- toYaml .Values.customVolumes.volumeMounts | nindent 12 }}
          {{- end }}
          {{- end }}{{/* end volumeMounts */}}
        {{- if .Values.deploymentContainer.lifecycle }}
          lifecycle:
            {{- toYaml .Values.deploymentContainer.lifecycle | nindent 12 }}
        {{- end}}{{/* end lifecycle */}}
          {{- if .Values.cloudsqlProxy.enabled }}
        - name: {{ .Values.cloudsqlProxy.name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.cloudsqlProxy.image.repository }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if ( eq $sqlProxyVersion "v2" ) }}
          ports:
            {{- toYaml .Values.cloudsqlProxy.ports | nindent 12 }}
          livenessProbe:
            {{- toYaml .Values.cloudsqlProxy.livenessProbe | nindent 12 }}
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - /bin/sleep 30 && rm -f /cloudsql/{{ $sqlinstanceConnectionName }}
          readinessProbe:
            {{- toYaml .Values.cloudsqlProxy.readinessProbe | nindent 12 }}
          startupProbe:
            {{- toYaml .Values.cloudsqlProxy.startupProbe | nindent 12 }}
          lifecycle:
            {{- toYaml .Values.cloudsqlProxy.lifecycle | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.cloudsqlProxy.resources | nindent 12 }}
          {{- if and ( eq $sqlProxyVersion "v1" ) ( $sqlinstanceConnectionName ) ( not .Values.cloudsqlProxy.command ) }}
          command:
            - "/cloud_sql_proxy"
            - "--dir=/cloudsql"
            - "-log_debug_stdout=true"
            - "-verbose=false"
            - "-ip_address_types=PRIVATE"
            - "-instances={{ $sqlinstanceConnectionName }}"
          {{- else if and ( eq $sqlProxyVersion "v1" ) (.Values.cloudsqlProxy.command) }}
          command:
            {{- toYaml .Values.cloudsqlProxy.command | nindent 12 }}
          {{- end }}
          {{- if and (eq $sqlProxyVersion "v2") ( $sqlinstanceConnectionName ) (not .Values.cloudsqlProxy.args) }}
          args:
            - "--private-ip"
            - "--quiet"
            - "{{ $sqlinstanceConnectionName }}?unix-socket-path=/cloudsql/{{ $sqlinstanceConnectionName }}"
          {{- else if and ( eq $sqlProxyVersion "v2" ) (.Values.cloudsqlProxy.args) }}
          args:
            {{- toYaml .Values.cloudsqlProxy.args | nindent 12 }}
          {{- end }}
          {{ if and ( eq $sqlProxyVersion "v2" ) (.Values.cloudsqlProxy.env) }}
          env:
            {{- toYaml .Values.cloudsqlProxy.env | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: {{ .Values.cloudsqlProxy.volume }}
              mountPath: /{{ .Values.cloudsqlProxy.volume }}
          {{- end }}

      {{- if $hasVolumes }}{{/* begin volumes */}}
      volumes:
      {{- if .Values.initContainer.enabled }}
        - name: tmp
          emptyDir: {}
      {{- end }}
      {{- if .Values.cloudsqlProxy.enabled }}
        - name: {{ .Values.cloudsqlProxy.volume }}
          emptyDir: null
      {{- end }}
      {{- if .Values.existingSecretMount.enabled }}
        {{- range .Values.existingSecretMount.secrets }}
        - name: {{ .name }}-vol
          secret:
            secretName: {{ .name }}
            defaultMode: {{ .defaultMode }}
        {{- end }}
      {{- end}}
      {{- if .Values.existingConfigMapMount.enabled }}
        {{- range .Values.existingConfigMapMount.configMaps }}
        - name: {{ .name }}-vol
          configMap:
            name: {{ .name }}
            defaultMode: {{ .defaultMode }}
        {{- end }}
      {{- end}}
      {{- if .Values.customConfig.enabled }}
        - name: customconfig-vol
          configMap:
            name: {{ include "common.customConfig.name" . }}
      {{- end }}
      {{- if .Values.customVolumes.enabled }}
        {{- toYaml .Values.customVolumes.volumes | nindent 8 }}
      {{- end }}
      {{- end }}{{/* end volumes */}}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
